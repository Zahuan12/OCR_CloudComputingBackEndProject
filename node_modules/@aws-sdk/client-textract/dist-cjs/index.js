'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var uuid = require('@smithy/uuid');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "textract",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class TextractClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultTextractHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class TextractServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, TextractServiceException.prototype);
    }
}

class AccessDeniedException extends TextractServiceException {
    name = "AccessDeniedException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
const FeatureType = {
    FORMS: "FORMS",
    LAYOUT: "LAYOUT",
    QUERIES: "QUERIES",
    SIGNATURES: "SIGNATURES",
    TABLES: "TABLES",
};
const AdapterVersionStatus = {
    ACTIVE: "ACTIVE",
    AT_RISK: "AT_RISK",
    CREATION_ERROR: "CREATION_ERROR",
    CREATION_IN_PROGRESS: "CREATION_IN_PROGRESS",
    DEPRECATED: "DEPRECATED",
};
const ContentClassifier = {
    FREE_OF_ADULT_CONTENT: "FreeOfAdultContent",
    FREE_OF_PERSONALLY_IDENTIFIABLE_INFORMATION: "FreeOfPersonallyIdentifiableInformation",
};
const BlockType = {
    CELL: "CELL",
    KEY_VALUE_SET: "KEY_VALUE_SET",
    LAYOUT_FIGURE: "LAYOUT_FIGURE",
    LAYOUT_FOOTER: "LAYOUT_FOOTER",
    LAYOUT_HEADER: "LAYOUT_HEADER",
    LAYOUT_KEY_VALUE: "LAYOUT_KEY_VALUE",
    LAYOUT_LIST: "LAYOUT_LIST",
    LAYOUT_PAGE_NUMBER: "LAYOUT_PAGE_NUMBER",
    LAYOUT_SECTION_HEADER: "LAYOUT_SECTION_HEADER",
    LAYOUT_TABLE: "LAYOUT_TABLE",
    LAYOUT_TEXT: "LAYOUT_TEXT",
    LAYOUT_TITLE: "LAYOUT_TITLE",
    LINE: "LINE",
    MERGED_CELL: "MERGED_CELL",
    PAGE: "PAGE",
    QUERY: "QUERY",
    QUERY_RESULT: "QUERY_RESULT",
    SELECTION_ELEMENT: "SELECTION_ELEMENT",
    SIGNATURE: "SIGNATURE",
    TABLE: "TABLE",
    TABLE_FOOTER: "TABLE_FOOTER",
    TABLE_TITLE: "TABLE_TITLE",
    TITLE: "TITLE",
    WORD: "WORD",
};
const EntityType = {
    COLUMN_HEADER: "COLUMN_HEADER",
    KEY: "KEY",
    SEMI_STRUCTURED_TABLE: "SEMI_STRUCTURED_TABLE",
    STRUCTURED_TABLE: "STRUCTURED_TABLE",
    TABLE_FOOTER: "TABLE_FOOTER",
    TABLE_SECTION_TITLE: "TABLE_SECTION_TITLE",
    TABLE_SUMMARY: "TABLE_SUMMARY",
    TABLE_TITLE: "TABLE_TITLE",
    VALUE: "VALUE",
};
const RelationshipType = {
    ANSWER: "ANSWER",
    CHILD: "CHILD",
    COMPLEX_FEATURES: "COMPLEX_FEATURES",
    MERGED_CELL: "MERGED_CELL",
    TABLE: "TABLE",
    TABLE_FOOTER: "TABLE_FOOTER",
    TABLE_TITLE: "TABLE_TITLE",
    TITLE: "TITLE",
    VALUE: "VALUE",
};
const SelectionStatus = {
    NOT_SELECTED: "NOT_SELECTED",
    SELECTED: "SELECTED",
};
const TextType = {
    HANDWRITING: "HANDWRITING",
    PRINTED: "PRINTED",
};
class BadDocumentException extends TextractServiceException {
    name = "BadDocumentException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "BadDocumentException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BadDocumentException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
class DocumentTooLargeException extends TextractServiceException {
    name = "DocumentTooLargeException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "DocumentTooLargeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DocumentTooLargeException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
class HumanLoopQuotaExceededException extends TextractServiceException {
    name = "HumanLoopQuotaExceededException";
    $fault = "client";
    ResourceType;
    QuotaCode;
    ServiceCode;
    Message;
    Code;
    constructor(opts) {
        super({
            name: "HumanLoopQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, HumanLoopQuotaExceededException.prototype);
        this.ResourceType = opts.ResourceType;
        this.QuotaCode = opts.QuotaCode;
        this.ServiceCode = opts.ServiceCode;
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
class InternalServerError extends TextractServiceException {
    name = "InternalServerError";
    $fault = "server";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "InternalServerError",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerError.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
class InvalidParameterException extends TextractServiceException {
    name = "InvalidParameterException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
class InvalidS3ObjectException extends TextractServiceException {
    name = "InvalidS3ObjectException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "InvalidS3ObjectException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidS3ObjectException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
class ProvisionedThroughputExceededException extends TextractServiceException {
    name = "ProvisionedThroughputExceededException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "ProvisionedThroughputExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ProvisionedThroughputExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
class ThrottlingException extends TextractServiceException {
    name = "ThrottlingException";
    $fault = "server";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
class UnsupportedDocumentException extends TextractServiceException {
    name = "UnsupportedDocumentException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "UnsupportedDocumentException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedDocumentException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
const ValueType = {
    DATE: "DATE",
};
const AutoUpdate = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
class ConflictException extends TextractServiceException {
    name = "ConflictException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
class IdempotentParameterMismatchException extends TextractServiceException {
    name = "IdempotentParameterMismatchException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "IdempotentParameterMismatchException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
class LimitExceededException extends TextractServiceException {
    name = "LimitExceededException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
class ServiceQuotaExceededException extends TextractServiceException {
    name = "ServiceQuotaExceededException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
class ValidationException extends TextractServiceException {
    name = "ValidationException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
class InvalidKMSKeyException extends TextractServiceException {
    name = "InvalidKMSKeyException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "InvalidKMSKeyException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidKMSKeyException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
class ResourceNotFoundException extends TextractServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
const JobStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    PARTIAL_SUCCESS: "PARTIAL_SUCCESS",
    SUCCEEDED: "SUCCEEDED",
};
class InvalidJobIdException extends TextractServiceException {
    name = "InvalidJobIdException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "InvalidJobIdException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidJobIdException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}

const se_AnalyzeDocumentCommand = async (input, context) => {
    const headers = sharedHeaders("AnalyzeDocument");
    let body;
    body = JSON.stringify(se_AnalyzeDocumentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AnalyzeExpenseCommand = async (input, context) => {
    const headers = sharedHeaders("AnalyzeExpense");
    let body;
    body = JSON.stringify(se_AnalyzeExpenseRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AnalyzeIDCommand = async (input, context) => {
    const headers = sharedHeaders("AnalyzeID");
    let body;
    body = JSON.stringify(se_AnalyzeIDRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateAdapterCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAdapter");
    let body;
    body = JSON.stringify(se_CreateAdapterRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateAdapterVersionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAdapterVersion");
    let body;
    body = JSON.stringify(se_CreateAdapterVersionRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteAdapterCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAdapter");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteAdapterVersionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAdapterVersion");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetectDocumentTextCommand = async (input, context) => {
    const headers = sharedHeaders("DetectDocumentText");
    let body;
    body = JSON.stringify(se_DetectDocumentTextRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetAdapterCommand = async (input, context) => {
    const headers = sharedHeaders("GetAdapter");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetAdapterVersionCommand = async (input, context) => {
    const headers = sharedHeaders("GetAdapterVersion");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDocumentAnalysisCommand = async (input, context) => {
    const headers = sharedHeaders("GetDocumentAnalysis");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDocumentTextDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("GetDocumentTextDetection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetExpenseAnalysisCommand = async (input, context) => {
    const headers = sharedHeaders("GetExpenseAnalysis");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetLendingAnalysisCommand = async (input, context) => {
    const headers = sharedHeaders("GetLendingAnalysis");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetLendingAnalysisSummaryCommand = async (input, context) => {
    const headers = sharedHeaders("GetLendingAnalysisSummary");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAdaptersCommand = async (input, context) => {
    const headers = sharedHeaders("ListAdapters");
    let body;
    body = JSON.stringify(se_ListAdaptersRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAdapterVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAdapterVersions");
    let body;
    body = JSON.stringify(se_ListAdapterVersionsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartDocumentAnalysisCommand = async (input, context) => {
    const headers = sharedHeaders("StartDocumentAnalysis");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartDocumentTextDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("StartDocumentTextDetection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartExpenseAnalysisCommand = async (input, context) => {
    const headers = sharedHeaders("StartExpenseAnalysis");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartLendingAnalysisCommand = async (input, context) => {
    const headers = sharedHeaders("StartLendingAnalysis");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateAdapterCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAdapter");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_AnalyzeDocumentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_AnalyzeDocumentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AnalyzeExpenseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_AnalyzeExpenseResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AnalyzeIDCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_AnalyzeIDResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateAdapterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateAdapterVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteAdapterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteAdapterVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectDocumentTextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DetectDocumentTextResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetAdapterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetAdapterResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetAdapterVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetAdapterVersionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDocumentAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetDocumentAnalysisResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDocumentTextDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetDocumentTextDetectionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetExpenseAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetExpenseAnalysisResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetLendingAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetLendingAnalysisResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetLendingAnalysisSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAdaptersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListAdaptersResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAdapterVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListAdapterVersionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartDocumentAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartDocumentTextDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartExpenseAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartLendingAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateAdapterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateAdapterResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.textract#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput);
        case "BadDocumentException":
        case "com.amazonaws.textract#BadDocumentException":
            throw await de_BadDocumentExceptionRes(parsedOutput);
        case "DocumentTooLargeException":
        case "com.amazonaws.textract#DocumentTooLargeException":
            throw await de_DocumentTooLargeExceptionRes(parsedOutput);
        case "HumanLoopQuotaExceededException":
        case "com.amazonaws.textract#HumanLoopQuotaExceededException":
            throw await de_HumanLoopQuotaExceededExceptionRes(parsedOutput);
        case "InternalServerError":
        case "com.amazonaws.textract#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput);
        case "InvalidParameterException":
        case "com.amazonaws.textract#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput);
        case "InvalidS3ObjectException":
        case "com.amazonaws.textract#InvalidS3ObjectException":
            throw await de_InvalidS3ObjectExceptionRes(parsedOutput);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.textract#ProvisionedThroughputExceededException":
            throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput);
        case "ThrottlingException":
        case "com.amazonaws.textract#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput);
        case "UnsupportedDocumentException":
        case "com.amazonaws.textract#UnsupportedDocumentException":
            throw await de_UnsupportedDocumentExceptionRes(parsedOutput);
        case "ConflictException":
        case "com.amazonaws.textract#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.textract#IdempotentParameterMismatchException":
            throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput);
        case "LimitExceededException":
        case "com.amazonaws.textract#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.textract#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput);
        case "ValidationException":
        case "com.amazonaws.textract#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput);
        case "InvalidKMSKeyException":
        case "com.amazonaws.textract#InvalidKMSKeyException":
            throw await de_InvalidKMSKeyExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.textract#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "InvalidJobIdException":
        case "com.amazonaws.textract#InvalidJobIdException":
            throw await de_InvalidJobIdExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_BadDocumentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new BadDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_DocumentTooLargeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new DocumentTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_HumanLoopQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new HumanLoopQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_IdempotentParameterMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InternalServerErrorRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidJobIdExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidJobIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidKMSKeyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidKMSKeyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidS3ObjectExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidS3ObjectException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ProvisionedThroughputExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ProvisionedThroughputExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnsupportedDocumentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnsupportedDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_AnalyzeDocumentRequest = (input, context) => {
    return smithyClient.take(input, {
        AdaptersConfig: smithyClient._json,
        Document: (_) => se_Document(_, context),
        FeatureTypes: smithyClient._json,
        HumanLoopConfig: smithyClient._json,
        QueriesConfig: smithyClient._json,
    });
};
const se_AnalyzeExpenseRequest = (input, context) => {
    return smithyClient.take(input, {
        Document: (_) => se_Document(_, context),
    });
};
const se_AnalyzeIDRequest = (input, context) => {
    return smithyClient.take(input, {
        DocumentPages: (_) => se_DocumentPages(_, context),
    });
};
const se_CreateAdapterRequest = (input, context) => {
    return smithyClient.take(input, {
        AdapterName: [],
        AutoUpdate: [],
        ClientRequestToken: [true, (_) => _ ?? uuid.v4()],
        Description: [],
        FeatureTypes: smithyClient._json,
        Tags: smithyClient._json,
    });
};
const se_CreateAdapterVersionRequest = (input, context) => {
    return smithyClient.take(input, {
        AdapterId: [],
        ClientRequestToken: [true, (_) => _ ?? uuid.v4()],
        DatasetConfig: smithyClient._json,
        KMSKeyId: [],
        OutputConfig: smithyClient._json,
        Tags: smithyClient._json,
    });
};
const se_DetectDocumentTextRequest = (input, context) => {
    return smithyClient.take(input, {
        Document: (_) => se_Document(_, context),
    });
};
const se_Document = (input, context) => {
    return smithyClient.take(input, {
        Bytes: context.base64Encoder,
        S3Object: smithyClient._json,
    });
};
const se_DocumentPages = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Document(entry, context);
    });
};
const se_ListAdaptersRequest = (input, context) => {
    return smithyClient.take(input, {
        AfterCreationTime: (_) => _.getTime() / 1_000,
        BeforeCreationTime: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListAdapterVersionsRequest = (input, context) => {
    return smithyClient.take(input, {
        AdapterId: [],
        AfterCreationTime: (_) => _.getTime() / 1_000,
        BeforeCreationTime: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NextToken: [],
    });
};
const de_AdapterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AdapterOverview(entry);
    });
    return retVal;
};
const de_AdapterOverview = (output, context) => {
    return smithyClient.take(output, {
        AdapterId: smithyClient.expectString,
        AdapterName: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FeatureTypes: smithyClient._json,
    });
};
const de_AdapterVersionEvaluationMetric = (output, context) => {
    return smithyClient.take(output, {
        AdapterVersion: (_) => de_EvaluationMetric(_),
        Baseline: (_) => de_EvaluationMetric(_),
        FeatureType: smithyClient.expectString,
    });
};
const de_AdapterVersionEvaluationMetrics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AdapterVersionEvaluationMetric(entry);
    });
    return retVal;
};
const de_AdapterVersionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AdapterVersionOverview(entry);
    });
    return retVal;
};
const de_AdapterVersionOverview = (output, context) => {
    return smithyClient.take(output, {
        AdapterId: smithyClient.expectString,
        AdapterVersion: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FeatureTypes: smithyClient._json,
        Status: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
    });
};
const de_AnalyzeDocumentResponse = (output, context) => {
    return smithyClient.take(output, {
        AnalyzeDocumentModelVersion: smithyClient.expectString,
        Blocks: (_) => de_BlockList(_),
        DocumentMetadata: smithyClient._json,
        HumanLoopActivationOutput: (_) => de_HumanLoopActivationOutput(_),
    });
};
const de_AnalyzeExpenseResponse = (output, context) => {
    return smithyClient.take(output, {
        DocumentMetadata: smithyClient._json,
        ExpenseDocuments: (_) => de_ExpenseDocumentList(_),
    });
};
const de_AnalyzeIDDetections = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        NormalizedValue: smithyClient._json,
        Text: smithyClient.expectString,
    });
};
const de_AnalyzeIDResponse = (output, context) => {
    return smithyClient.take(output, {
        AnalyzeIDModelVersion: smithyClient.expectString,
        DocumentMetadata: smithyClient._json,
        IdentityDocuments: (_) => de_IdentityDocumentList(_),
    });
};
const de_Block = (output, context) => {
    return smithyClient.take(output, {
        BlockType: smithyClient.expectString,
        ColumnIndex: smithyClient.expectInt32,
        ColumnSpan: smithyClient.expectInt32,
        Confidence: smithyClient.limitedParseFloat32,
        EntityTypes: smithyClient._json,
        Geometry: (_) => de_Geometry(_),
        Id: smithyClient.expectString,
        Page: smithyClient.expectInt32,
        Query: smithyClient._json,
        Relationships: smithyClient._json,
        RowIndex: smithyClient.expectInt32,
        RowSpan: smithyClient.expectInt32,
        SelectionStatus: smithyClient.expectString,
        Text: smithyClient.expectString,
        TextType: smithyClient.expectString,
    });
};
const de_BlockList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Block(entry);
    });
    return retVal;
};
const de_BoundingBox = (output, context) => {
    return smithyClient.take(output, {
        Height: smithyClient.limitedParseFloat32,
        Left: smithyClient.limitedParseFloat32,
        Top: smithyClient.limitedParseFloat32,
        Width: smithyClient.limitedParseFloat32,
    });
};
const de_DetectDocumentTextResponse = (output, context) => {
    return smithyClient.take(output, {
        Blocks: (_) => de_BlockList(_),
        DetectDocumentTextModelVersion: smithyClient.expectString,
        DocumentMetadata: smithyClient._json,
    });
};
const de_EvaluationMetric = (output, context) => {
    return smithyClient.take(output, {
        F1Score: smithyClient.limitedParseFloat32,
        Precision: smithyClient.limitedParseFloat32,
        Recall: smithyClient.limitedParseFloat32,
    });
};
const de_ExpenseCurrency = (output, context) => {
    return smithyClient.take(output, {
        Code: smithyClient.expectString,
        Confidence: smithyClient.limitedParseFloat32,
    });
};
const de_ExpenseDetection = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Geometry: (_) => de_Geometry(_),
        Text: smithyClient.expectString,
    });
};
const de_ExpenseDocument = (output, context) => {
    return smithyClient.take(output, {
        Blocks: (_) => de_BlockList(_),
        ExpenseIndex: smithyClient.expectInt32,
        LineItemGroups: (_) => de_LineItemGroupList(_),
        SummaryFields: (_) => de_ExpenseFieldList(_),
    });
};
const de_ExpenseDocumentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExpenseDocument(entry);
    });
    return retVal;
};
const de_ExpenseField = (output, context) => {
    return smithyClient.take(output, {
        Currency: (_) => de_ExpenseCurrency(_),
        GroupProperties: smithyClient._json,
        LabelDetection: (_) => de_ExpenseDetection(_),
        PageNumber: smithyClient.expectInt32,
        Type: (_) => de_ExpenseType(_),
        ValueDetection: (_) => de_ExpenseDetection(_),
    });
};
const de_ExpenseFieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExpenseField(entry);
    });
    return retVal;
};
const de_ExpenseType = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Text: smithyClient.expectString,
    });
};
const de_Extraction = (output, context) => {
    return smithyClient.take(output, {
        ExpenseDocument: (_) => de_ExpenseDocument(_),
        IdentityDocument: (_) => de_IdentityDocument(_),
        LendingDocument: (_) => de_LendingDocument(_),
    });
};
const de_ExtractionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Extraction(entry);
    });
    return retVal;
};
const de_Geometry = (output, context) => {
    return smithyClient.take(output, {
        BoundingBox: (_) => de_BoundingBox(_),
        Polygon: (_) => de_Polygon(_),
        RotationAngle: smithyClient.limitedParseFloat32,
    });
};
const de_GetAdapterResponse = (output, context) => {
    return smithyClient.take(output, {
        AdapterId: smithyClient.expectString,
        AdapterName: smithyClient.expectString,
        AutoUpdate: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        FeatureTypes: smithyClient._json,
        Tags: smithyClient._json,
    });
};
const de_GetAdapterVersionResponse = (output, context) => {
    return smithyClient.take(output, {
        AdapterId: smithyClient.expectString,
        AdapterVersion: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DatasetConfig: smithyClient._json,
        EvaluationMetrics: (_) => de_AdapterVersionEvaluationMetrics(_),
        FeatureTypes: smithyClient._json,
        KMSKeyId: smithyClient.expectString,
        OutputConfig: smithyClient._json,
        Status: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
        Tags: smithyClient._json,
    });
};
const de_GetDocumentAnalysisResponse = (output, context) => {
    return smithyClient.take(output, {
        AnalyzeDocumentModelVersion: smithyClient.expectString,
        Blocks: (_) => de_BlockList(_),
        DocumentMetadata: smithyClient._json,
        JobStatus: smithyClient.expectString,
        NextToken: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
        Warnings: smithyClient._json,
    });
};
const de_GetDocumentTextDetectionResponse = (output, context) => {
    return smithyClient.take(output, {
        Blocks: (_) => de_BlockList(_),
        DetectDocumentTextModelVersion: smithyClient.expectString,
        DocumentMetadata: smithyClient._json,
        JobStatus: smithyClient.expectString,
        NextToken: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
        Warnings: smithyClient._json,
    });
};
const de_GetExpenseAnalysisResponse = (output, context) => {
    return smithyClient.take(output, {
        AnalyzeExpenseModelVersion: smithyClient.expectString,
        DocumentMetadata: smithyClient._json,
        ExpenseDocuments: (_) => de_ExpenseDocumentList(_),
        JobStatus: smithyClient.expectString,
        NextToken: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
        Warnings: smithyClient._json,
    });
};
const de_GetLendingAnalysisResponse = (output, context) => {
    return smithyClient.take(output, {
        AnalyzeLendingModelVersion: smithyClient.expectString,
        DocumentMetadata: smithyClient._json,
        JobStatus: smithyClient.expectString,
        NextToken: smithyClient.expectString,
        Results: (_) => de_LendingResultList(_),
        StatusMessage: smithyClient.expectString,
        Warnings: smithyClient._json,
    });
};
const de_HumanLoopActivationOutput = (output, context) => {
    return smithyClient.take(output, {
        HumanLoopActivationConditionsEvaluationResults: smithyClient.LazyJsonString.from,
        HumanLoopActivationReasons: smithyClient._json,
        HumanLoopArn: smithyClient.expectString,
    });
};
const de_IdentityDocument = (output, context) => {
    return smithyClient.take(output, {
        Blocks: (_) => de_BlockList(_),
        DocumentIndex: smithyClient.expectInt32,
        IdentityDocumentFields: (_) => de_IdentityDocumentFieldList(_),
    });
};
const de_IdentityDocumentField = (output, context) => {
    return smithyClient.take(output, {
        Type: (_) => de_AnalyzeIDDetections(_),
        ValueDetection: (_) => de_AnalyzeIDDetections(_),
    });
};
const de_IdentityDocumentFieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IdentityDocumentField(entry);
    });
    return retVal;
};
const de_IdentityDocumentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IdentityDocument(entry);
    });
    return retVal;
};
const de_LendingDetection = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Geometry: (_) => de_Geometry(_),
        SelectionStatus: smithyClient.expectString,
        Text: smithyClient.expectString,
    });
};
const de_LendingDetectionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LendingDetection(entry);
    });
    return retVal;
};
const de_LendingDocument = (output, context) => {
    return smithyClient.take(output, {
        LendingFields: (_) => de_LendingFieldList(_),
        SignatureDetections: (_) => de_SignatureDetectionList(_),
    });
};
const de_LendingField = (output, context) => {
    return smithyClient.take(output, {
        KeyDetection: (_) => de_LendingDetection(_),
        Type: smithyClient.expectString,
        ValueDetections: (_) => de_LendingDetectionList(_),
    });
};
const de_LendingFieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LendingField(entry);
    });
    return retVal;
};
const de_LendingResult = (output, context) => {
    return smithyClient.take(output, {
        Extractions: (_) => de_ExtractionList(_),
        Page: smithyClient.expectInt32,
        PageClassification: (_) => de_PageClassification(_),
    });
};
const de_LendingResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LendingResult(entry);
    });
    return retVal;
};
const de_LineItemFields = (output, context) => {
    return smithyClient.take(output, {
        LineItemExpenseFields: (_) => de_ExpenseFieldList(_),
    });
};
const de_LineItemGroup = (output, context) => {
    return smithyClient.take(output, {
        LineItemGroupIndex: smithyClient.expectInt32,
        LineItems: (_) => de_LineItemList(_),
    });
};
const de_LineItemGroupList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LineItemGroup(entry);
    });
    return retVal;
};
const de_LineItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LineItemFields(entry);
    });
    return retVal;
};
const de_ListAdaptersResponse = (output, context) => {
    return smithyClient.take(output, {
        Adapters: (_) => de_AdapterList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListAdapterVersionsResponse = (output, context) => {
    return smithyClient.take(output, {
        AdapterVersions: (_) => de_AdapterVersionList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_PageClassification = (output, context) => {
    return smithyClient.take(output, {
        PageNumber: (_) => de_PredictionList(_),
        PageType: (_) => de_PredictionList(_),
    });
};
const de_Point = (output, context) => {
    return smithyClient.take(output, {
        X: smithyClient.limitedParseFloat32,
        Y: smithyClient.limitedParseFloat32,
    });
};
const de_Polygon = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Point(entry);
    });
    return retVal;
};
const de_Prediction = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Value: smithyClient.expectString,
    });
};
const de_PredictionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Prediction(entry);
    });
    return retVal;
};
const de_SignatureDetection = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Geometry: (_) => de_Geometry(_),
    });
};
const de_SignatureDetectionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SignatureDetection(entry);
    });
    return retVal;
};
const de_UpdateAdapterResponse = (output, context) => {
    return smithyClient.take(output, {
        AdapterId: smithyClient.expectString,
        AdapterName: smithyClient.expectString,
        AutoUpdate: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        FeatureTypes: smithyClient._json,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(TextractServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `Textract.${operation}`,
    };
}

class AnalyzeDocumentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "AnalyzeDocument", {})
    .n("TextractClient", "AnalyzeDocumentCommand")
    .f(void 0, void 0)
    .ser(se_AnalyzeDocumentCommand)
    .de(de_AnalyzeDocumentCommand)
    .build() {
}

class AnalyzeExpenseCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "AnalyzeExpense", {})
    .n("TextractClient", "AnalyzeExpenseCommand")
    .f(void 0, void 0)
    .ser(se_AnalyzeExpenseCommand)
    .de(de_AnalyzeExpenseCommand)
    .build() {
}

class AnalyzeIDCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "AnalyzeID", {})
    .n("TextractClient", "AnalyzeIDCommand")
    .f(void 0, void 0)
    .ser(se_AnalyzeIDCommand)
    .de(de_AnalyzeIDCommand)
    .build() {
}

class CreateAdapterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "CreateAdapter", {})
    .n("TextractClient", "CreateAdapterCommand")
    .f(void 0, void 0)
    .ser(se_CreateAdapterCommand)
    .de(de_CreateAdapterCommand)
    .build() {
}

class CreateAdapterVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "CreateAdapterVersion", {})
    .n("TextractClient", "CreateAdapterVersionCommand")
    .f(void 0, void 0)
    .ser(se_CreateAdapterVersionCommand)
    .de(de_CreateAdapterVersionCommand)
    .build() {
}

class DeleteAdapterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "DeleteAdapter", {})
    .n("TextractClient", "DeleteAdapterCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAdapterCommand)
    .de(de_DeleteAdapterCommand)
    .build() {
}

class DeleteAdapterVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "DeleteAdapterVersion", {})
    .n("TextractClient", "DeleteAdapterVersionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAdapterVersionCommand)
    .de(de_DeleteAdapterVersionCommand)
    .build() {
}

class DetectDocumentTextCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "DetectDocumentText", {})
    .n("TextractClient", "DetectDocumentTextCommand")
    .f(void 0, void 0)
    .ser(se_DetectDocumentTextCommand)
    .de(de_DetectDocumentTextCommand)
    .build() {
}

class GetAdapterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "GetAdapter", {})
    .n("TextractClient", "GetAdapterCommand")
    .f(void 0, void 0)
    .ser(se_GetAdapterCommand)
    .de(de_GetAdapterCommand)
    .build() {
}

class GetAdapterVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "GetAdapterVersion", {})
    .n("TextractClient", "GetAdapterVersionCommand")
    .f(void 0, void 0)
    .ser(se_GetAdapterVersionCommand)
    .de(de_GetAdapterVersionCommand)
    .build() {
}

class GetDocumentAnalysisCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "GetDocumentAnalysis", {})
    .n("TextractClient", "GetDocumentAnalysisCommand")
    .f(void 0, void 0)
    .ser(se_GetDocumentAnalysisCommand)
    .de(de_GetDocumentAnalysisCommand)
    .build() {
}

class GetDocumentTextDetectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "GetDocumentTextDetection", {})
    .n("TextractClient", "GetDocumentTextDetectionCommand")
    .f(void 0, void 0)
    .ser(se_GetDocumentTextDetectionCommand)
    .de(de_GetDocumentTextDetectionCommand)
    .build() {
}

class GetExpenseAnalysisCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "GetExpenseAnalysis", {})
    .n("TextractClient", "GetExpenseAnalysisCommand")
    .f(void 0, void 0)
    .ser(se_GetExpenseAnalysisCommand)
    .de(de_GetExpenseAnalysisCommand)
    .build() {
}

class GetLendingAnalysisCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "GetLendingAnalysis", {})
    .n("TextractClient", "GetLendingAnalysisCommand")
    .f(void 0, void 0)
    .ser(se_GetLendingAnalysisCommand)
    .de(de_GetLendingAnalysisCommand)
    .build() {
}

class GetLendingAnalysisSummaryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "GetLendingAnalysisSummary", {})
    .n("TextractClient", "GetLendingAnalysisSummaryCommand")
    .f(void 0, void 0)
    .ser(se_GetLendingAnalysisSummaryCommand)
    .de(de_GetLendingAnalysisSummaryCommand)
    .build() {
}

class ListAdaptersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "ListAdapters", {})
    .n("TextractClient", "ListAdaptersCommand")
    .f(void 0, void 0)
    .ser(se_ListAdaptersCommand)
    .de(de_ListAdaptersCommand)
    .build() {
}

class ListAdapterVersionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "ListAdapterVersions", {})
    .n("TextractClient", "ListAdapterVersionsCommand")
    .f(void 0, void 0)
    .ser(se_ListAdapterVersionsCommand)
    .de(de_ListAdapterVersionsCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "ListTagsForResource", {})
    .n("TextractClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class StartDocumentAnalysisCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "StartDocumentAnalysis", {})
    .n("TextractClient", "StartDocumentAnalysisCommand")
    .f(void 0, void 0)
    .ser(se_StartDocumentAnalysisCommand)
    .de(de_StartDocumentAnalysisCommand)
    .build() {
}

class StartDocumentTextDetectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "StartDocumentTextDetection", {})
    .n("TextractClient", "StartDocumentTextDetectionCommand")
    .f(void 0, void 0)
    .ser(se_StartDocumentTextDetectionCommand)
    .de(de_StartDocumentTextDetectionCommand)
    .build() {
}

class StartExpenseAnalysisCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "StartExpenseAnalysis", {})
    .n("TextractClient", "StartExpenseAnalysisCommand")
    .f(void 0, void 0)
    .ser(se_StartExpenseAnalysisCommand)
    .de(de_StartExpenseAnalysisCommand)
    .build() {
}

class StartLendingAnalysisCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "StartLendingAnalysis", {})
    .n("TextractClient", "StartLendingAnalysisCommand")
    .f(void 0, void 0)
    .ser(se_StartLendingAnalysisCommand)
    .de(de_StartLendingAnalysisCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "TagResource", {})
    .n("TextractClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "UntagResource", {})
    .n("TextractClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateAdapterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Textract", "UpdateAdapter", {})
    .n("TextractClient", "UpdateAdapterCommand")
    .f(void 0, void 0)
    .ser(se_UpdateAdapterCommand)
    .de(de_UpdateAdapterCommand)
    .build() {
}

const commands = {
    AnalyzeDocumentCommand,
    AnalyzeExpenseCommand,
    AnalyzeIDCommand,
    CreateAdapterCommand,
    CreateAdapterVersionCommand,
    DeleteAdapterCommand,
    DeleteAdapterVersionCommand,
    DetectDocumentTextCommand,
    GetAdapterCommand,
    GetAdapterVersionCommand,
    GetDocumentAnalysisCommand,
    GetDocumentTextDetectionCommand,
    GetExpenseAnalysisCommand,
    GetLendingAnalysisCommand,
    GetLendingAnalysisSummaryCommand,
    ListAdaptersCommand,
    ListAdapterVersionsCommand,
    ListTagsForResourceCommand,
    StartDocumentAnalysisCommand,
    StartDocumentTextDetectionCommand,
    StartExpenseAnalysisCommand,
    StartLendingAnalysisCommand,
    TagResourceCommand,
    UntagResourceCommand,
    UpdateAdapterCommand,
};
class Textract extends TextractClient {
}
smithyClient.createAggregatedClient(commands, Textract);

const paginateListAdapterVersions = core.createPaginator(TextractClient, ListAdapterVersionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListAdapters = core.createPaginator(TextractClient, ListAdaptersCommand, "NextToken", "NextToken", "MaxResults");

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AccessDeniedException = AccessDeniedException;
exports.AdapterVersionStatus = AdapterVersionStatus;
exports.AnalyzeDocumentCommand = AnalyzeDocumentCommand;
exports.AnalyzeExpenseCommand = AnalyzeExpenseCommand;
exports.AnalyzeIDCommand = AnalyzeIDCommand;
exports.AutoUpdate = AutoUpdate;
exports.BadDocumentException = BadDocumentException;
exports.BlockType = BlockType;
exports.ConflictException = ConflictException;
exports.ContentClassifier = ContentClassifier;
exports.CreateAdapterCommand = CreateAdapterCommand;
exports.CreateAdapterVersionCommand = CreateAdapterVersionCommand;
exports.DeleteAdapterCommand = DeleteAdapterCommand;
exports.DeleteAdapterVersionCommand = DeleteAdapterVersionCommand;
exports.DetectDocumentTextCommand = DetectDocumentTextCommand;
exports.DocumentTooLargeException = DocumentTooLargeException;
exports.EntityType = EntityType;
exports.FeatureType = FeatureType;
exports.GetAdapterCommand = GetAdapterCommand;
exports.GetAdapterVersionCommand = GetAdapterVersionCommand;
exports.GetDocumentAnalysisCommand = GetDocumentAnalysisCommand;
exports.GetDocumentTextDetectionCommand = GetDocumentTextDetectionCommand;
exports.GetExpenseAnalysisCommand = GetExpenseAnalysisCommand;
exports.GetLendingAnalysisCommand = GetLendingAnalysisCommand;
exports.GetLendingAnalysisSummaryCommand = GetLendingAnalysisSummaryCommand;
exports.HumanLoopQuotaExceededException = HumanLoopQuotaExceededException;
exports.IdempotentParameterMismatchException = IdempotentParameterMismatchException;
exports.InternalServerError = InternalServerError;
exports.InvalidJobIdException = InvalidJobIdException;
exports.InvalidKMSKeyException = InvalidKMSKeyException;
exports.InvalidParameterException = InvalidParameterException;
exports.InvalidS3ObjectException = InvalidS3ObjectException;
exports.JobStatus = JobStatus;
exports.LimitExceededException = LimitExceededException;
exports.ListAdapterVersionsCommand = ListAdapterVersionsCommand;
exports.ListAdaptersCommand = ListAdaptersCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.ProvisionedThroughputExceededException = ProvisionedThroughputExceededException;
exports.RelationshipType = RelationshipType;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.SelectionStatus = SelectionStatus;
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
exports.StartDocumentAnalysisCommand = StartDocumentAnalysisCommand;
exports.StartDocumentTextDetectionCommand = StartDocumentTextDetectionCommand;
exports.StartExpenseAnalysisCommand = StartExpenseAnalysisCommand;
exports.StartLendingAnalysisCommand = StartLendingAnalysisCommand;
exports.TagResourceCommand = TagResourceCommand;
exports.TextType = TextType;
exports.Textract = Textract;
exports.TextractClient = TextractClient;
exports.TextractServiceException = TextractServiceException;
exports.ThrottlingException = ThrottlingException;
exports.UnsupportedDocumentException = UnsupportedDocumentException;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateAdapterCommand = UpdateAdapterCommand;
exports.ValidationException = ValidationException;
exports.ValueType = ValueType;
exports.paginateListAdapterVersions = paginateListAdapterVersions;
exports.paginateListAdapters = paginateListAdapters;
